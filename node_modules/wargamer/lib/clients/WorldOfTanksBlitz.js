'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _Accounts = require('../modules/common/Accounts');

var _Accounts2 = _interopRequireDefault(_Accounts);

var _BaseClient2 = require('./BaseClient');

var _BaseClient3 = _interopRequireDefault(_BaseClient2);

var _Tankopedia = require('../modules/WorldOfTanksBlitz/Tankopedia');

var _Tankopedia2 = _interopRequireDefault(_Tankopedia);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @classdesc The World of Tanks Blitz API client.
 * @extends BaseClient
 */
var WorldOfTanksBlitz = function (_BaseClient) {
  _inherits(WorldOfTanksBlitz, _BaseClient);

  /**
   * Constructor.
   * @param {ClientOptions} options - The client options.
   */
  function WorldOfTanksBlitz(options) {
    _classCallCheck(this, WorldOfTanksBlitz);

    /**
     * The client's Accounts module.
     * @type {Accounts}
     */
    var _this = _possibleConstructorReturn(this, (WorldOfTanksBlitz.__proto__ || Object.getPrototypeOf(WorldOfTanksBlitz)).call(this, _extends({}, options, { type: 'wotb' })));

    _this.accounts = new _Accounts2.default(_this);

    /**
     * The client's Tankopedia module.
     * @type {Tankopedia}
     */
    _this.tankopedia = new _Tankopedia2.default(_this);
    return _this;
  }

  return WorldOfTanksBlitz;
}(_BaseClient3.default);

exports.default = WorldOfTanksBlitz;