'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _RequestError2 = require('./RequestError');

var _RequestError3 = _interopRequireDefault(_RequestError2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The error object returned from Wargaming API methods.
 * @typedef {Object} WargamingAPIError
 * @property {number} code - The Wargaming API error code.
 * @property {string} message - The wargaming API error message.
 * @property {string} field - The Wargaming API error field.
 * @property {*} value - The Wargaming API error field value.
 * @private
 */

/**
 * @classdesc Error received from Wargaming's API.
 * @extends RequestError
 */
var APIError = function (_RequestError) {
  _inherits(APIError, _RequestError);

  /**
   * Constructor.
   * @param {Object} options - The constructor options.
   * @param {BaseClient} options.client - The API client that the error originated
   *   from.
   * @param {number} options.statusCode - The HTTP status code of the request.
   * @param {string} options.url - The URL that the request was for.
   * @param {string} options.requestRealm - The realm of the API that this error
   *   originated from.
   * @param {string} options.method - The API method that the request was for.
   * @param {WargamingAPIError} options.error - The error object returned from
   *   the API.
   */
  function APIError(_ref) {
    var requestRealm = _ref.requestRealm,
        method = _ref.method,
        error = _ref.error,
        rest = _objectWithoutProperties(_ref, ['requestRealm', 'method', 'error']);

    _classCallCheck(this, APIError);

    var code = error.code,
        message = error.message,
        field = error.field,
        value = error.value;

    /**
     * The realm of the API that this response originated from.
     * @type {string}
     */
    var _this = _possibleConstructorReturn(this, (APIError.__proto__ || Object.getPrototypeOf(APIError)).call(this, _extends({}, rest, {
      message: `${code}: ${message}. Error field: ${field} => ${value}.`
    })));

    _this.requestRealm = requestRealm;

    /**
     * The API method that the request was for.
     * @type {string}
     */
    _this.method = method;

    /**
     * The Wargaming API error code.
     * @type {number}
     */
    _this.code = code;

    /**
     * The message corresponding to the error code.
     * @type {string}
     */
    _this.apiMessage = message;

    /**
     * The field which was flagged in the error.
     * @type {string}
     */
    _this.field = field;

    /**
     * The value of the field which was flagged in the error.
     * @type {*}
     */
    _this.value = value;
    return _this;
  }

  return APIError;
}(_RequestError3.default);

exports.default = APIError;