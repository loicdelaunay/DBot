'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _fuse = require('fuse.js');

var _fuse2 = _interopRequireDefault(_fuse);

var _ClientModule2 = require('../ClientModule');

var _ClientModule3 = _interopRequireDefault(_ClientModule2);

var _Encyclopedia = require('../mixins/Encyclopedia');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @classdesc Module for the World of Tanks Console Tankopedia endpoint.
 * @extends ClientModule
 */
var Tankopedia = function (_ClientModule) {
  _inherits(Tankopedia, _ClientModule);

  /**
   * Constructor.
   * @param {BaseClient} client - The API client this module belongs to.
   */
  function Tankopedia(client) {
    _classCallCheck(this, Tankopedia);

    /**
     * The module's Fuse object.
     * @type {Fuse}
     * @private
     */
    var _this = _possibleConstructorReturn(this, (Tankopedia.__proto__ || Object.getPrototypeOf(Tankopedia)).call(this, client, 'tankopedia'));

    _this.fuse = new _fuse2.default([], {
      keys: ['name', 'short_name']
    });
    return _this;
  }

  /**
   * Searches for a vehicle by name or ID and returns its entry from the
   *   `encyclopedia/vehicles` endpoint.
   * @param {(number|string)} identifier - The vehicle identifier to use for
   *   lookup.
   * If a number is supplied, it is treated as the vehicle's ID.
   * If a string is supplied, the identifier is matched against vehicle names
   *   with the closest match being selected.
   * @returns {Promise.<?Object, Error>} A promise resolving to the data for the
   *   matched vehicle, or `null` if no vehicles were matched.
   */


  _createClass(Tankopedia, [{
    key: 'findVehicle',
    value: function findVehicle(identifier) {
      return _Encyclopedia.resolveEntry.call(this, {
        identifier,
        indexEndpoint: 'encyclopedia/vehicles',
        dataEndpoint: 'encyclopedia/vehicles',
        identifierKey: 'tank_id',
        fuse: this.fuse,
        searchFields: ['name', 'short_name']
      });
    }

    /**
     * Localizes an achievement section slug. The returned value is the section's
     *   name.
     * @param {string} slug - The slug.
     * @returns {Promise.<(string|undefined), Error>} Promise resolving to the
     *   translated slug, or `undefined` if it couldn't be translated.
     */

  }, {
    key: 'localizeAchievementSection',
    value: function localizeAchievementSection(slug) {
      return _Encyclopedia.localize.call(this, {
        method: 'encyclopedia/info',
        type: 'achievement_sections',
        slug
      }).then(function (section) {
        return section && section.name;
      });
    }

    /**
     * Localizes a vehicle type slug.
     * @param {string} slug - The slug.
     * @returns {Promise.<(string|undefined), Error>} Promise resolving to the
     *   translated slug, or `undefined` if it couldn't be translated.
     */

  }, {
    key: 'localizeVehicleType',
    value: function localizeVehicleType(slug) {
      return _Encyclopedia.localize.call(this, {
        method: 'encyclopedia/info',
        type: 'vehicle_types',
        slug
      });
    }

    /**
     * Localizes a vehicle nation slug.
     * @param {string} slug - The slug.
     * @returns {Promise.<(string|undefined), Error>} Promise resolving to the
     *   translated slug, or `undefined` if it couldn't be translated.
     */

  }, {
    key: 'localizeVehicleNation',
    value: function localizeVehicleNation(slug) {
      return _Encyclopedia.localize.call(this, {
        method: 'encyclopedia/info',
        type: 'vehicle_nations',
        slug
      });
    }
  }]);

  return Tankopedia;
}(_ClientModule3.default);

exports.default = Tankopedia;