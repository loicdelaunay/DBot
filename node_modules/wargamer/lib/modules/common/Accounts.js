'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ClientModule2 = require('../ClientModule');

var _ClientModule3 = _interopRequireDefault(_ClientModule2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @classdesc Module for Accounts endpoints.
 * @extends ClientModule
 */
var Accounts = function (_ClientModule) {
  _inherits(Accounts, _ClientModule);

  /**
   * Constructor.
   * @param {BaseClient} client - The API client this module belongs to.
   */
  function Accounts(client) {
    _classCallCheck(this, Accounts);

    return _possibleConstructorReturn(this, (Accounts.__proto__ || Object.getPrototypeOf(Accounts)).call(this, client, 'accounts'));
  }

  /**
   * Searches for player IDs given a nickname. Supports the search types available
   *   on the `account/list` endpoint.
   * @param {string} name - The player's nickname.
   * @param {string} [searchType='exact'] - The search type to use.
   * @returns {Promise.<(Array.<Object>|number|null), Error>} A promise resolving
   *   to the returned search results.
   * If `searchType` is `'startswith'`, the resolved value matches the data returned
   *   by the `account/list` endpoint.
   * If `searchType` is `'exact'`, the resolved value is the matching player's ID,
   *   or `null` if no match was found.
   */


  _createClass(Accounts, [{
    key: 'findPlayerId',
    value: function findPlayerId(name) {
      var searchType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'exact';

      switch (searchType.toLowerCase()) {
        case 'startswith':
          return this.client.get('account/list', { search: name }).then(function (response) {
            return response.data;
          });
        case 'exact':
          return this.client.get('account/list', { search: name }).then(function (response) {
            return response.data.length ? response.data[0].account_id : null;
          });
        default:
          return Promise.reject(new Error('Invalid search type specified for player search.'));
      }
    }
  }]);

  return Accounts;
}(_ClientModule3.default);

exports.default = Accounts;