'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ClientModule2 = require('../ClientModule');

var _ClientModule3 = _interopRequireDefault(_ClientModule2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @classdesc Module for Authentication endpoints.
 * @extends ClientModule
 */
var Authentication = function (_ClientModule) {
  _inherits(Authentication, _ClientModule);

  /**
   * Constructor.
   * @param {BaseClient} client - The API client this module belongs to.
   */
  function Authentication(client) {
    _classCallCheck(this, Authentication);

    return _possibleConstructorReturn(this, (Authentication.__proto__ || Object.getPrototypeOf(Authentication)).call(this, client, 'authentication'));
  }

  /**
   * Sends a request to renew the client's access token. Upon a successful
   *   request, the client's current access token will be updated with the
   *   returned token.
   * @returns {Promise.<APIResponse, Error>} Returns the same value as a normal
   *   request if the client's access token is defined, else rejects with a
   *   plain `Error`.
   */


  _createClass(Authentication, [{
    key: 'renewAccessToken',
    value: function renewAccessToken() {
      var _this2 = this;

      if (!this.client.accessToken) {
        return Promise.reject(new Error('Failed to renew access token: client\'s access token is not set.'));
      }

      return this.client.post('auth/prolongate', {}, { type: this.client.type === 'wotx' ? 'wotx' : 'wot' }).then(function (response) {
        _this2.client.accessToken = response.data.access_token;

        return response;
      });
    }

    /**
     * Sends a request to invalidate the client's access token. Upon a successful
     *   request, the client's current access token will be set to `null`.
     * @returns {Promise.<APIResponse, Error>} Returns the same value as a normal
     *   request if the client's access token is defined, else rejects with a
     *   plain `Error`.
     */

  }, {
    key: 'destroyAccessToken',
    value: function destroyAccessToken() {
      var _this3 = this;

      if (!this.client.accessToken) {
        return Promise.reject(new Error('Failed to invalidate access token: client\'s access token is not set.'));
      }

      return this.client.post('auth/logout', {}, { type: this.client.type === 'wotx' ? 'wotx' : 'wot' }).then(function (response) {
        _this3.client.accessToken = null;

        return response;
      });
    }
  }]);

  return Authentication;
}(_ClientModule3.default);

exports.default = Authentication;